Personal notes first authored by Lucas Zutter


*****CONTRIBUTIONS THUS FAR (useful/large ones marked by *)*****
10/13: Discovered memory leak.
10/15: Code refining (avoiding forks).
10/16: Bit of documentation to the code.
10/21: Developed threading pseudocode. unfortunately, the idea behind it went counter to the intention of the lab, so it doesn't exactly count as adding to the program.
10/22: *Client::comm and Server::comm test code that successfully sending and recieving int arrays between Client and Server.
10/27: *Client and Server sieve (pseudocode shown on this document around line 250).

KEY:

*WORD indicates something probably worthwhile (the "*" especially).

"~Partner" indicates things I didn't do. Everything not starting with ~ is something I did.

"--MEETING START/ENDED--" indicates that I was with my partner when these notes were made and/or when work was done.



NOTES:

Beej's Guide (one of the reccomended references) is worth refering to for sockets. Currently read up to: 3 (start)

git add . ++++++++ git commit -m "commit message" 

Partner suggested "hackerrank.com" for getting familiar with programming C++ via exercises.



DAYLY LOGS:

10/13:

--MEETING START--

~Partner started the program last night, making a sieve that finds primes between 2 numbers entered by a user.
	*Currently outputs every prime. Should change to output first and last few primes (probably 5).

Tried Valgrind and found that the memset() used in sieve.cpp caused a memory leak. "detele[] list" was added at the end of main.cpp to resolve this.
	However, since this is the last thing done in the whole program, there could be memory issues while the program is running.
	It's worth noting that memset allocates all the memory needed all at once. Perhaps this isn't neccesary...
	*IDEA: maybe we can limit how much memory is used by writing to temporary files?

~Decided to go with TCP sockets.

Used online random number generator to decide to use port 9382

~Partner started working on sockets. Says we need a client and server.
	~So far, the connection is set up, but not used.
	Valgrind reveals new allocs being made. Deleting client and server solves all but 2 allocs.
		Added more deletes in main and "freeadderinfo" to client and server classes. Fixed memory leaks.


Actual socket needs to be made. Partner suggests Beej's guide section 6.
Will also need to figure out threading.

--MEETING ENDED--

Nothing more done since meeting. Major oversleeping (about 14 hours in bed) prevented any more from being done on 10/14.

10/15:

--MEETING START-- [Nothing happened since lat meeting]

~Partner added code to Client.cpp based on example in Beej's Guide reference

--MEETING ENDED-- [Partner went to other meeting]

Had an issue with git not properly pulling. Made a new clone in alternate Lab2 folder/directory.

Tried compiling current code and ran into a number of "not declared in this scope" errors (likely missing an include or two).


--MEETING START-- [Partner back from other meeting]

Errors in Client.cpp handled. Client::connect method removed (it was empty) to allow internal connect() function to work.

Actual program works, but (*client).setup() in main causes connection failure.

~Partner tweeked code. Server now gets defined first. However, client doesn't seem to get a connection. If switched back, Server doesn't connect.
	Perhaps these things need to be done in a seperate thread?
	Maybe run two Putty screens running two different copies of the program? <-- Current idea



~Connection works. One putty window runs "./main server" then another runs "./main client"******************



Noticed partner using forks. Suggested switching to threading.

Client seems to disconnect right after connecting.
	This is due to the connection being closed early, not because of a bug.

Current idea for doing the sieve: 
	Do most of the stuff on the client, such as keeping a list of primes and doing odd number steps (primes 2, 7, etc.), 
	while the Server does even number steps (3, 11, etc.) and sends back newest prime found and current list

Still working on figuring out how the sieve will really work...


--MEETING ENDED--


10/16: Added some comments to Client.cpp and ran valgrind successfully. Nothing else today.


10/21:

--MEETING START--

~Partner implemented connection between two different machines. *Client side needs a number to know what "thing" to connect to. 
	Ex: ./main Client 4 uses server readied in Thing 4

Created method to close the socket in the main rather than at the end of client setup, before sieve work would be done.

Some brainstorming follows.


Doing the Sieve without threads:

Client step 1:

-Setup sieve, including saving 2 as prime in some list.
-Mark multiples of 2 as non-prime.
-Save the first number after 2 not marked as non-prime (3) as prime.
-Send data set starting at closest proceeding prime (3) to Server.

Server step 1+ ("+" means this step is repeated):

-Take in list of primes. First time starts at 3.
-Cross off multiples of first prime recieved.
-Send data back to Client starting with closest prime (5 the first time).

Client step 2+:

-Save first number in the list sent back by the Server (5 the first time) as prime.
-Do the same thing the server just did, except save the second non-prime number the list as non-prime (such as 7).

Last step:

If the square of the start of the list recieved is greater than the length of the list, we're done. That means...

IN CLIENT:
-The number at the start of this list is already saved in the list of primes held in here, so simply give the list of primes to the main (or whatever outputs the list).

IN SERVER:
-Since the other numbers don't matter, we can just send back this one prime number. Do the IN CLIENT step above after.




Doing the sieve with threads:

Thread psudocode (worth double checking for correctness):

POSSIBLE PROBLEMS (both solved, but we may want only 2 threads at once):
1. The square of the current prime isn't the last prime to be found, or else we might stop at 11 when we want other primes between 2 and 100.
	I'm sure that primes are found in threads after the thread containing the prime above the squareroot of the end of the list is started.
	But if we're not making new threads, how do we tell if numbers after that point prime? 
*SOLVED: since threads send data to the next thread every time, those primes are in the last thread at the end.

2. What if the lower bound entered by the user is greater than 2? Will we skip checking 2?

Start with the whole list with range defined by the user in Client. Make a thread in Client.

A:  Thread gets data, including the whole list and the largest number in the original list. Wait until the entire list is sent.

B:  if(the square of the first number in this list is greater than the last number in the original list)
	{simply wait for the rest of the threads to be done sending data. this leads to "step F".}

    else {go to step C}

C:  cross off all multiples of the first number in the list, marking them as non-prime.

D:  Go through the numbers, looking for ones not yet crossed off.
	
	//This part is upposedly optional, at least the threading
	Start a new thread. the first number found as not crossed off becomes the next thread's first list value. //This fisrt number is certainly prime.
		If(this is the client){make the thread in the server}
		If(this is the server){make the thread in the client}
			set a boolean to say we've started a new thread as well. Each thread should only start one more thread

	Send number(s) not crossed off that are between the last number we crossed off (or the start of the list) and the number we just crossed off}

//This may not be an actual step anymore
E:  if(we've gone through the whole list and we can verify that we have the whole list (basic else should work here))

	{go in a state where we're ready to join with the other threads}


F: if(this is the last thread and it's done running)
	{join threads by taking the first number in the previous thread and put it at the start of the list. Keep doing this until there are no more threads}

	//it's as simple as that because if numbers aren't marked as non-prime by the time they get sent all the way to the last thread, they're prime

G: With all threads joined, send data back to Client (if we're in the server), then main to output the list of prime numbers.


Proof that this pseudocode should work: list primes from 2 to 20

thread 2 doesn't mark: 3 5 7 9 11 13 15 17 19
thread 3 doesn't mark: 5 7 11 13 17 19
thread 5 doesn't mark: 7 11 13 17 19
thread 7 doesn't mark: 11 13 17 19
thread 11 doesn't mark: 13 17 19

thread 11 recived 17 and 19 by the time thread 7 is done looking through data. likewise with 7 getting data from 5, 5 getting data from 3, etc.

So: 
thread 11 has 11, 13, 17, 19. all those are prime (add 11, 13, 11, 17, 19)
thread 7 has 7, 11, 13, 17, 19. We stop at 11 since thread 11 has that number (add 7)
thread 5 has 5, 7, 11, 13, 17, 19. Stop at 7, add 5.
thread 3 has 3 and everything 5 has. (add 3)
thread 2 has 2 and everything 3 has. (add 2)

We end up with 2, 3, 5, 7, 11, 13, 17, 19 being prime.

The above was shown to my partner and I added it to our repository so he can review it. Will email Professor about this pseudocode.

--MEETING ENDED--


10/22:

**Changed test code in Server's "Server::comm" class to be able to send a list of numbers to Client and recieve a different list of numbers from Client.
	Having the zeroth variable be the actual length of the list instead of having only list numbers in the list feels strange, 
		but we made it work, and it doesn't involve an extra "send" just for that bit of info.

10/27:

~Partner went through code last Friday, removing undesireable code such as "break" and "continue".

Between going to our class, we met for a moment and he gave me a page of notes.

The situation is, now that we have a way to send a number list between machines and change the list while doing so, we need the machines to do the sieve.

Notes: The list bounds are hardcoded. May want to switch back to user input, though that's mostly optional.
	Also, the Sieve isn't done at all, it just outputs a list from 2 to 25.
	We're not using sieve.cpp anymore. Maybe we should remove it since we may not need it?
	Another thing: "client.ccp" isn't "Client.ccp" (notice c vs C). Why is that?
		Fixed the typo. The typo was causing errors due to the make file missing "client.ccp" because it looks for "Client.ccp".




***Client/Server sieve pseudocode:


So, after creating the list:

int[] Client::sieve(int socket, int listMax){

	//PREPARATION
	int[] list = new int[listMax + 1];	//used to create sieveList
	int[] sieveList = new int[listMax + 1]; //holds all numbers in list[] that aren't multiples of the first list number in the list, plus 2 helper variables. Starts out empty
	int[] masterList;			//our return value at the end of the sieve

	//populate sieveList with numbers 2 through listMax starting at sieveList[1] (not 0)
	for(int i = 2; i < listMax + 1; i++){
		list[i - 1] = i;
	}
	list[0] = listMax; //the first variable in a sieveList is the size of the list (it's the next best thing we could think of next to "list.size()")

	
	int masterLength = 0;

	//With a list made, start the sieve
	while(1){
		if(list[1] > (int)sqrt((double) upperLimit)){
			for(int i = 2; i < sieveList[0] + 1; i++){ //add all numbers still in sieveList to the masterList
				masterList[masterLength] = sieveList[i];
				masterLength++;
			}
			return masterList; //we're assuming sieveList has something by now, that we did at least one sieve step. may need an if statement just in case
		} else {

			//first, record the first list number in the list received to the masterList
			masterList[masterLength] = list[1];
			masterLength++;

			//do a step of the sieve:
			int j = 1;
			for(int i = 2; i < list[0]; i++){ //Note: list[1] is prime. we want to check list[2] to the end.

				if(list[i] % list[1] != 0){ //in other words, "if this number is not a multiple of the prime number being checked"
					sieveList[j] = list[i];
					j++;
				}
			} //end sieve step

			//Add helper variables to the list
			sieveList[0] = j - 1; //sieveList size. The minus 1 is there because j is ahead by 1
			sieveList[j] = 0; //"end of list" variable. It belongs just past the actual list. May be completely optional depending on how sending/receiving data works

			//Also, record the first list number in the new sieveList into masterList
			masterList[masterLength] = sieveList[1];
			masterLength++;

			//now the list is the way we want it, send it to the server
			/*
			code block to send data to the other machine, called Server
			*/

			//With the data sent, we'll have to wait for Server to send the data back. Then we do more.
			/*
			code block to recieve data from the Server. data is loaded into list[]
			*/

		} // end if/else
	} //end sieve while loop
	
}

void Server::sieve(int socket){

	//PREPARATION
	int[] list;	 //list recieved from Client
	int[] sieveList; //list we'll be giving back to client

	//Server is a bit different. It has to wait to get some data before doing anything instead of doing something then sending data and waiting for more
	//The while loop also starts right away because the only thing going on in here is either detection that the sieve is over or doing a sieve step

	while(1){
		/*
		code block to recieve data from the Client. data is loaded into list[]
		*/

		if(list[1] > (int)sqrt((double) upperLimit)){ //since Server doesn't give the list back to main, we have to send it to Client

			/*
			code block to send data to the other machine, called Client
			*/

		} else {

			//do a step of the sieve (just like in Client):
			int j = 1;
			for(int i = 2; i < list[0]; i++){ //reminder: list[0] is where the size of the actual list is stored

				if(list[i] % list[1] != 0){
					sieveList[j] = list[i];
					j++;
				}
			} //end sieve step

			//Add helper variables to the list
			sieveList[0] = j - 1; //sieveList size
			sieveList[j] = 0; //"end of list" variable

			//now the list is the way we want it, send it to the server
			/*
			code block to send data to the other machine, called Client
			*/

		} // end if/else
	}// while loop
}

***end Pseudocode


--MEETING START (partner arived while I was developing pseudocode)--

Showed pseudocode to partner, and he approved. Suggested a few small changes as well.
	Partner commented out his current code to test my code [in progress].
	He's using vectors instead of arrays in a few places though. Hopefully this doesn't slow things down a lot.

CODE TESTED: Plesantly, my code works pretty good! We got a problem though: the number 23 (last prime from 2 to 25) seems to be disappearing somehow.
	Worse, it may not be returning values properly (even though the machines are recieving data fairly well)...
		Test code that outputs what number gets added to the masterList shows that 7 gets added twice
			starting i at 2 fixed a few things.

~Partner tweeked the code a bit. So far, the masterList is getting populated right except for the last prime number that should be in the list.
	A couple more tweeks, and the final output is good! Though, we're getting an extra number in client. The real problem could easily be elsewhere.

The servers (thing 4, thing 5, etc.) crashed, so we're stuck not doing work for now. Decided to head home at this point. Good thing we got a sieve working between 2 machines.

--MEETING ENDED--


10/28: 

Partner tried sending larger sets of data. While smaller data sets run fine, sending larger data sets causes only partial data sending. 40,000 is/was the best we can do.
Also, trying to run valgrind with large numbers seems to result in crashes. I've tried it with smaller numbers and didn't have problems though, so I'll ignore valgrind now.
	It seems to fail consistently

I switched my side of the code from int to unsigned long. I'm not sure if this is the right thing though, so I'm keeping a clone of the project that sticks with using ints.

I think the real problem is in sending the data. We don't have loops or at least not using anything to make sure send() sends everything or recieve() gets everything.

Things look pretty random. It looks like sending more bytes increases the odds of some of the data not being sent.
	"Some of the data not being sent" is actually random massive numbers being sent followed by an incorrect sieve that ends early.


Shouldn't recieve() wait to fill the buffer completely before doing anything? Are we making sure this happens?
	stack overflow suggests "excess bytes may be discarded depending on the *type of socket* the message is received *from*", so we need the right buffer.

~Partner added a recieve loop to make sure all data was recieved. Now we can do a multi-machine sieve up to about 214,250. Random failure is less likely, but still occurs.
	We may be hitting data type limits, such as too big a number for data type "int", but maybe not another.
	We could also have a memory issue and we have to release memory at the right points.

~Partner dynamically allocated lists by, for example, changing int list[] to int* list[], and we can go up to 500,000 now.
A couple more changes, and we got to 1,000,000. Not too far from 10 million. I wonder if we'd be able to do 10 million and beyond if we used the right data type/structure...

MAXDATASIZE may also be the problem,as setting that too high causes the program not to run right either.



!!!!!!!!!!SUCCESS!!!!!!!!!!



After dynamically allocating the buffer, we can do not just 10 million, but 20 million!! 20 million takes about 15 seconds (and that's with a few debug outputs).
	Looks like it was primarily a memory issue after all.

Almost forgot to free the memory the buffer was using. Actually, using "delete[] buf" doesn't let the program work at all... Guess we're going to deal with it.


Did a final test: 100 million numbers takes about 2 minutes and 40 seconds.


END OF DOCUMENT (my partner's got things from here, such as finishing touches on the code)